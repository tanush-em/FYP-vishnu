=== FYP-VISHNU PROJECT DEPLOYMENT LOG ===
Deployment started at: Fri Sep 19 20:16:25 IST 2025

=== STEP 1: INSTALLING DEPENDENCIES ===
Starting dependency installation at: Fri Sep 19 20:16:29 IST 2025
error: externally-managed-environment

× This environment is externally managed
╰─> To install Python packages system-wide, try brew install
    xyz, where xyz is the package you are trying to
    install.
    
    If you wish to install a Python library that isn't in Homebrew,
    use a virtual environment:
    
    python3 -m venv path/to/venv
    source path/to/venv/bin/activate
    python3 -m pip install xyz
    
    If you wish to install a Python application that isn't in Homebrew,
    it may be easiest to use 'pipx install xyz', which will manage a
    virtual environment for you. You can install pipx with
    
    brew install pipx
    
    You may restore the old behavior of pip by passing
    the '--break-system-packages' flag to pip, or by adding
    'break-system-packages = true' to your pip.conf file. The latter
    will permanently disable this error.
    
    If you disable this error, we STRONGLY recommend that you additionally
    pass the '--user' flag to pip, or set 'user = true' in your pip.conf
    file. Failure to do this can result in a broken Homebrew installation.
    
    Read more about this behavior here: <https://peps.python.org/pep-0668/>

note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
hint: See PEP 668 for the detailed specification.
Virtual environment issue detected. Checking existing env...
Activating existing virtual environment...
Virtual environment activated successfully
Installing dependencies...
Requirement already satisfied: tensorflow-macos in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 2)) (2.16.2)
Requirement already satisfied: tensorflow-metal in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 3)) (1.2.0)
Requirement already satisfied: scikit-learn>=1.3.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 4)) (1.7.2)
Requirement already satisfied: pandas>=2.0.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 5)) (2.3.2)
Requirement already satisfied: numpy>=1.24.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 6)) (1.26.4)
Requirement already satisfied: streamlit>=1.28.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 9)) (1.49.1)
Requirement already satisfied: plotly>=5.17.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 10)) (6.3.0)
Requirement already satisfied: dash>=2.14.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 11)) (3.2.0)
Requirement already satisfied: joblib>=1.3.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 14)) (1.5.2)
Requirement already satisfied: python-dateutil>=2.8.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 15)) (2.9.0.post0)
Requirement already satisfied: xgboost>=1.7.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 18)) (3.0.5)
Requirement already satisfied: lightgbm>=4.0.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 19)) (4.6.0)
Requirement already satisfied: catboost>=1.2.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 20)) (1.2.8)
Requirement already satisfied: matplotlib>=3.7.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 23)) (3.10.6)
Requirement already satisfied: seaborn>=0.12.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 24)) (0.13.2)
Requirement already satisfied: fastapi>=0.103.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 27)) (0.116.2)
Requirement already satisfied: uvicorn>=0.23.0 in ./env/lib/python3.12/site-packages (from -r requirements.txt (line 28)) (0.35.0)
Requirement already satisfied: tensorflow==2.16.2 in ./env/lib/python3.12/site-packages (from tensorflow-macos->-r requirements.txt (line 2)) (2.16.2)
Requirement already satisfied: absl-py>=1.0.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (2.3.1)
Requirement already satisfied: astunparse>=1.6.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (1.6.3)
Requirement already satisfied: flatbuffers>=23.5.26 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (25.2.10)
Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (0.6.0)
Requirement already satisfied: google-pasta>=0.1.1 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (0.2.0)
Requirement already satisfied: h5py>=3.10.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (3.14.0)
Requirement already satisfied: libclang>=13.0.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (18.1.1)
Requirement already satisfied: ml-dtypes~=0.3.1 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (0.3.2)
Requirement already satisfied: opt-einsum>=2.3.2 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (3.4.0)
Requirement already satisfied: packaging in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (25.0)
Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (4.25.8)
Requirement already satisfied: requests<3,>=2.21.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (2.32.5)
Requirement already satisfied: setuptools in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (80.9.0)
Requirement already satisfied: six>=1.12.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (1.17.0)
Requirement already satisfied: termcolor>=1.1.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (3.1.0)
Requirement already satisfied: typing-extensions>=3.6.6 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (4.15.0)
Requirement already satisfied: wrapt>=1.11.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (1.17.3)
Requirement already satisfied: grpcio<2.0,>=1.24.3 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (1.75.0)
Requirement already satisfied: tensorboard<2.17,>=2.16 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (2.16.2)
Requirement already satisfied: keras>=3.0.0 in ./env/lib/python3.12/site-packages (from tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (3.11.3)
Requirement already satisfied: wheel~=0.35 in ./env/lib/python3.12/site-packages (from tensorflow-metal->-r requirements.txt (line 3)) (0.45.1)
Requirement already satisfied: scipy>=1.8.0 in ./env/lib/python3.12/site-packages (from scikit-learn>=1.3.0->-r requirements.txt (line 4)) (1.16.2)
Requirement already satisfied: threadpoolctl>=3.1.0 in ./env/lib/python3.12/site-packages (from scikit-learn>=1.3.0->-r requirements.txt (line 4)) (3.6.0)
Requirement already satisfied: pytz>=2020.1 in ./env/lib/python3.12/site-packages (from pandas>=2.0.0->-r requirements.txt (line 5)) (2025.2)
Requirement already satisfied: tzdata>=2022.7 in ./env/lib/python3.12/site-packages (from pandas>=2.0.0->-r requirements.txt (line 5)) (2025.2)
Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (5.5.0)
Requirement already satisfied: blinker<2,>=1.5.0 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (1.9.0)
Requirement already satisfied: cachetools<7,>=4.0 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (6.2.0)
Requirement already satisfied: click<9,>=7.0 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (8.3.0)
Requirement already satisfied: pillow<12,>=7.1.0 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (11.3.0)
Requirement already satisfied: pyarrow>=7.0 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (21.0.0)
Requirement already satisfied: tenacity<10,>=8.1.0 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (9.1.2)
Requirement already satisfied: toml<2,>=0.10.1 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (0.10.2)
Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (3.1.45)
Requirement already satisfied: pydeck<1,>=0.8.0b4 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (0.9.1)
Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in ./env/lib/python3.12/site-packages (from streamlit>=1.28.0->-r requirements.txt (line 9)) (6.5.2)
Requirement already satisfied: narwhals>=1.15.1 in ./env/lib/python3.12/site-packages (from plotly>=5.17.0->-r requirements.txt (line 10)) (2.5.0)
Requirement already satisfied: Flask<3.2,>=1.0.4 in ./env/lib/python3.12/site-packages (from dash>=2.14.0->-r requirements.txt (line 11)) (3.1.2)
Requirement already satisfied: Werkzeug<3.2 in ./env/lib/python3.12/site-packages (from dash>=2.14.0->-r requirements.txt (line 11)) (3.1.3)
Requirement already satisfied: importlib-metadata in ./env/lib/python3.12/site-packages (from dash>=2.14.0->-r requirements.txt (line 11)) (8.7.0)
Requirement already satisfied: retrying in ./env/lib/python3.12/site-packages (from dash>=2.14.0->-r requirements.txt (line 11)) (1.4.2)
Requirement already satisfied: nest-asyncio in ./env/lib/python3.12/site-packages (from dash>=2.14.0->-r requirements.txt (line 11)) (1.6.0)
Requirement already satisfied: graphviz in ./env/lib/python3.12/site-packages (from catboost>=1.2.0->-r requirements.txt (line 20)) (0.21)
Requirement already satisfied: contourpy>=1.0.1 in ./env/lib/python3.12/site-packages (from matplotlib>=3.7.0->-r requirements.txt (line 23)) (1.3.3)
Requirement already satisfied: cycler>=0.10 in ./env/lib/python3.12/site-packages (from matplotlib>=3.7.0->-r requirements.txt (line 23)) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in ./env/lib/python3.12/site-packages (from matplotlib>=3.7.0->-r requirements.txt (line 23)) (4.60.0)
Requirement already satisfied: kiwisolver>=1.3.1 in ./env/lib/python3.12/site-packages (from matplotlib>=3.7.0->-r requirements.txt (line 23)) (1.4.9)
Requirement already satisfied: pyparsing>=2.3.1 in ./env/lib/python3.12/site-packages (from matplotlib>=3.7.0->-r requirements.txt (line 23)) (3.2.4)
Requirement already satisfied: starlette<0.49.0,>=0.40.0 in ./env/lib/python3.12/site-packages (from fastapi>=0.103.0->-r requirements.txt (line 27)) (0.48.0)
Requirement already satisfied: pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4 in ./env/lib/python3.12/site-packages (from fastapi>=0.103.0->-r requirements.txt (line 27)) (2.11.9)
Requirement already satisfied: h11>=0.8 in ./env/lib/python3.12/site-packages (from uvicorn>=0.23.0->-r requirements.txt (line 28)) (0.16.0)
Requirement already satisfied: jinja2 in ./env/lib/python3.12/site-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit>=1.28.0->-r requirements.txt (line 9)) (3.1.6)
Requirement already satisfied: jsonschema>=3.0 in ./env/lib/python3.12/site-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit>=1.28.0->-r requirements.txt (line 9)) (4.25.1)
Requirement already satisfied: itsdangerous>=2.2.0 in ./env/lib/python3.12/site-packages (from Flask<3.2,>=1.0.4->dash>=2.14.0->-r requirements.txt (line 11)) (2.2.0)
Requirement already satisfied: markupsafe>=2.1.1 in ./env/lib/python3.12/site-packages (from Flask<3.2,>=1.0.4->dash>=2.14.0->-r requirements.txt (line 11)) (3.0.2)
Requirement already satisfied: gitdb<5,>=4.0.1 in ./env/lib/python3.12/site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit>=1.28.0->-r requirements.txt (line 9)) (4.0.12)
Requirement already satisfied: annotated-types>=0.6.0 in ./env/lib/python3.12/site-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.103.0->-r requirements.txt (line 27)) (0.7.0)
Requirement already satisfied: pydantic-core==2.33.2 in ./env/lib/python3.12/site-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.103.0->-r requirements.txt (line 27)) (2.33.2)
Requirement already satisfied: typing-inspection>=0.4.0 in ./env/lib/python3.12/site-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.103.0->-r requirements.txt (line 27)) (0.4.1)
Requirement already satisfied: charset_normalizer<4,>=2 in ./env/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (3.4.3)
Requirement already satisfied: idna<4,>=2.5 in ./env/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in ./env/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (2.5.0)
Requirement already satisfied: certifi>=2017.4.17 in ./env/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (2025.8.3)
Requirement already satisfied: anyio<5,>=3.6.2 in ./env/lib/python3.12/site-packages (from starlette<0.49.0,>=0.40.0->fastapi>=0.103.0->-r requirements.txt (line 27)) (4.10.0)
Requirement already satisfied: zipp>=3.20 in ./env/lib/python3.12/site-packages (from importlib-metadata->dash>=2.14.0->-r requirements.txt (line 11)) (3.23.0)
Requirement already satisfied: sniffio>=1.1 in ./env/lib/python3.12/site-packages (from anyio<5,>=3.6.2->starlette<0.49.0,>=0.40.0->fastapi>=0.103.0->-r requirements.txt (line 27)) (1.3.1)
Requirement already satisfied: smmap<6,>=3.0.1 in ./env/lib/python3.12/site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit>=1.28.0->-r requirements.txt (line 9)) (5.0.2)
Requirement already satisfied: attrs>=22.2.0 in ./env/lib/python3.12/site-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit>=1.28.0->-r requirements.txt (line 9)) (25.3.0)
Requirement already satisfied: jsonschema-specifications>=2023.03.6 in ./env/lib/python3.12/site-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit>=1.28.0->-r requirements.txt (line 9)) (2025.9.1)
Requirement already satisfied: referencing>=0.28.4 in ./env/lib/python3.12/site-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit>=1.28.0->-r requirements.txt (line 9)) (0.36.2)
Requirement already satisfied: rpds-py>=0.7.1 in ./env/lib/python3.12/site-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit>=1.28.0->-r requirements.txt (line 9)) (0.27.1)
Requirement already satisfied: rich in ./env/lib/python3.12/site-packages (from keras>=3.0.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (14.1.0)
Requirement already satisfied: namex in ./env/lib/python3.12/site-packages (from keras>=3.0.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (0.1.0)
Requirement already satisfied: optree in ./env/lib/python3.12/site-packages (from keras>=3.0.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (0.17.0)
Requirement already satisfied: markdown>=2.6.8 in ./env/lib/python3.12/site-packages (from tensorboard<2.17,>=2.16->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (3.9)
Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in ./env/lib/python3.12/site-packages (from tensorboard<2.17,>=2.16->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (0.7.2)
Requirement already satisfied: markdown-it-py>=2.2.0 in ./env/lib/python3.12/site-packages (from rich->keras>=3.0.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (4.0.0)
Requirement already satisfied: pygments<3.0.0,>=2.13.0 in ./env/lib/python3.12/site-packages (from rich->keras>=3.0.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (2.19.2)
Requirement already satisfied: mdurl~=0.1 in ./env/lib/python3.12/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.0.0->tensorflow==2.16.2->tensorflow-macos->-r requirements.txt (line 2)) (0.1.2)

[notice] A new release of pip is available: 24.2 -> 25.2
[notice] To update, run: pip install --upgrade pip

Dependencies installation completed successfully!
All required packages are already installed.

=== STEP 2: TRAINING MODELS ===
Starting model training at: Fri Sep 19 20:16:50 IST 2025
Running model training...
INFO:__main__:Starting full pipeline training...
INFO:__main__:Loading data from data/labeled_20180713-home2mimos.csv
INFO:data_preprocessing:Starting complete preprocessing pipeline...
INFO:data_preprocessing:Removing faulty sensor readings...
Traceback (most recent call last):
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3812, in get_loc
    return self._engine.get_loc(casted_key)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "pandas/_libs/index.pyx", line 167, in pandas._libs.index.IndexEngine.get_loc
  File "pandas/_libs/index.pyx", line 196, in pandas._libs.index.IndexEngine.get_loc
  File "pandas/_libs/hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas/_libs/hashtable_class_helper.pxi", line 7096, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'BatteryVolt'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 173, in <module>
    main()
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 167, in main
    results = pipeline.full_pipeline_training('data/labeled_20180713-home2mimos.csv')
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 139, in full_pipeline_training
    features, patterns, processed_df = self.load_and_prepare_data(data_path)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 37, in load_and_prepare_data
    features, patterns, processed_df = self.preprocessor.fit_transform(df)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/data_preprocessing.py", line 154, in fit_transform
    df = self.remove_faulty_readings(df)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/data_preprocessing.py", line 27, in remove_faulty_readings
    df = df[df['BatteryVolt'] > 10]  # Battery voltage should be reasonable
            ~~^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/frame.py", line 4107, in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3819, in get_loc
    raise KeyError(key) from err
KeyError: 'BatteryVolt'
Error encountered: Column 'BatteryVolt' not found in data
Examining data structure...
Retrying model training after fixing column names...
INFO:__main__:Starting full pipeline training...
INFO:__main__:Loading data from data/labeled_20180713-home2mimos.csv
INFO:data_preprocessing:Starting complete preprocessing pipeline...
INFO:data_preprocessing:Removing faulty sensor readings...
INFO:data_preprocessing:Removed 43437 faulty readings
INFO:data_preprocessing:Synchronizing timestamps...
INFO:data_preprocessing:Creating driving event timeline...
INFO:data_preprocessing:Aggregating features over 30s intervals...
Traceback (most recent call last):
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 173, in <module>
    main()
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 167, in main
    results = pipeline.full_pipeline_training('data/labeled_20180713-home2mimos.csv')
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 139, in full_pipeline_training
    features, patterns, processed_df = self.load_and_prepare_data(data_path)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 37, in load_and_prepare_data
    features, patterns, processed_df = self.preprocessor.fit_transform(df)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/data_preprocessing.py", line 163, in fit_transform
    agg_df = self.aggregate_temporal_features(df)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/data_preprocessing.py", line 81, in aggregate_temporal_features
    df['interval'] = (df['timestamp_seconds'] // interval_seconds).astype(int)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/generic.py", line 6662, in astype
    new_data = self._mgr.astype(dtype=dtype, copy=copy, errors=errors)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/internals/managers.py", line 430, in astype
    return self.apply(
           ^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/internals/managers.py", line 363, in apply
    applied = getattr(b, f)(**kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/internals/blocks.py", line 784, in astype
    new_values = astype_array_safe(values, dtype, copy=copy, errors=errors)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/dtypes/astype.py", line 237, in astype_array_safe
    new_values = astype_array(values, dtype, copy=copy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/dtypes/astype.py", line 182, in astype_array
    values = _astype_nansafe(values, dtype, copy=copy)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/dtypes/astype.py", line 101, in _astype_nansafe
    return _astype_float_to_int_nansafe(arr, dtype, copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/dtypes/astype.py", line 145, in _astype_float_to_int_nansafe
    raise IntCastingNaNError(
pandas.errors.IntCastingNaNError: Cannot convert non-finite values (NA or inf) to integer
Retrying model training after fixing timestamp issues...
INFO:__main__:Starting full pipeline training...
INFO:__main__:Loading data from data/labeled_20180713-home2mimos.csv
INFO:data_preprocessing:Starting complete preprocessing pipeline...
INFO:data_preprocessing:Removing faulty sensor readings...
INFO:data_preprocessing:Removed 43437 faulty readings
INFO:data_preprocessing:Synchronizing timestamps...
WARNING:data_preprocessing:Could not parse timestamps, using row index
INFO:data_preprocessing:Creating driving event timeline...
INFO:data_preprocessing:Aggregating features over 30s intervals...
INFO:data_preprocessing:Preparing features for machine learning...
Traceback (most recent call last):
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 173, in <module>
    main()
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 167, in main
    results = pipeline.full_pipeline_training('data/labeled_20180713-home2mimos.csv')
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 139, in full_pipeline_training
    features, patterns, processed_df = self.load_and_prepare_data(data_path)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 37, in load_and_prepare_data
    features, patterns, processed_df = self.preprocessor.fit_transform(df)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/data_preprocessing.py", line 183, in fit_transform
    scaled_features = self.scaler.fit_transform(features)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 316, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/base.py", line 894, in fit_transform
    return self.fit(X, **fit_params).transform(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/preprocessing/_data.py", line 907, in fit
    return self.partial_fit(X, y, sample_weight)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/base.py", line 1365, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/preprocessing/_data.py", line 943, in partial_fit
    X = validate_data(
        ^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/utils/validation.py", line 2954, in validate_data
    out = check_array(X, input_name="X", **check_params)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/utils/validation.py", line 1128, in check_array
    raise ValueError(
ValueError: Found array with 0 sample(s) (shape=(0, 10)) while a minimum of 1 is required by StandardScaler.
Debugging column names...
INFO:__main__:Starting full pipeline training...
INFO:__main__:Loading data from data/labeled_20180713-home2mimos.csv
INFO:data_preprocessing:Starting complete preprocessing pipeline...
INFO:data_preprocessing:Removing faulty sensor readings...
INFO:data_preprocessing:Removed 0 faulty readings
INFO:data_preprocessing:Synchronizing timestamps...
INFO:data_preprocessing:Creating driving event timeline...
INFO:data_preprocessing:Aggregating features over 30s intervals...
INFO:data_preprocessing:Preparing features for machine learning...
INFO:data_preprocessing:Available columns in aggregated data: ['interval', 'RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean', 'Event_<lambda>']
INFO:data_preprocessing:Looking for features: ['RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean']
INFO:data_preprocessing:Found features: ['RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean']
INFO:data_preprocessing:Extracting driving patterns...
Traceback (most recent call last):
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3812, in get_loc
    return self._engine.get_loc(casted_key)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "pandas/_libs/index.pyx", line 167, in pandas._libs.index.IndexEngine.get_loc
  File "pandas/_libs/index.pyx", line 196, in pandas._libs.index.IndexEngine.get_loc
  File "pandas/_libs/hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas/_libs/hashtable_class_helper.pxi", line 7096, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'Event'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 173, in <module>
    main()
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 167, in main
    results = pipeline.full_pipeline_training('data/labeled_20180713-home2mimos.csv')
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 139, in full_pipeline_training
    features, patterns, processed_df = self.load_and_prepare_data(data_path)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 37, in load_and_prepare_data
    features, patterns, processed_df = self.preprocessor.fit_transform(df)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/data_preprocessing.py", line 196, in fit_transform
    patterns = self.extract_driving_patterns(agg_df)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/data_preprocessing.py", line 120, in extract_driving_patterns
    patterns['acceleration_frequency'] = (df['Event'] == 'Accelerating').sum() / len(df)
                                          ~~^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/frame.py", line 4107, in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3819, in get_loc
    raise KeyError(key) from err
KeyError: 'Event'
Retrying after fixing Event column...
INFO:__main__:Starting full pipeline training...
INFO:__main__:Loading data from data/labeled_20180713-home2mimos.csv
INFO:data_preprocessing:Starting complete preprocessing pipeline...
INFO:data_preprocessing:Removing faulty sensor readings...
INFO:data_preprocessing:Removed 0 faulty readings
INFO:data_preprocessing:Synchronizing timestamps...
INFO:data_preprocessing:Creating driving event timeline...
INFO:data_preprocessing:Aggregating features over 30s intervals...
INFO:data_preprocessing:Preparing features for machine learning...
INFO:data_preprocessing:Available columns in aggregated data: ['interval', 'RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean', 'Event']
INFO:data_preprocessing:Looking for features: ['RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean']
INFO:data_preprocessing:Found features: ['RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean']
INFO:data_preprocessing:Extracting driving patterns...
INFO:__main__:Creating synthetic labels for training...
INFO:__main__:Training Stage 1 model...
INFO:lstm_models:Building Stage 1 LSTM model...
2025-09-19 20:19:48.139896: I metal_plugin/src/device/metal_device.cc:1154] Metal device set to: Apple M3
2025-09-19 20:19:48.139932: I metal_plugin/src/device/metal_device.cc:296] systemMemory: 16.00 GB
2025-09-19 20:19:48.139939: I metal_plugin/src/device/metal_device.cc:313] maxCacheSize: 5.33 GB
2025-09-19 20:19:48.139970: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:305] Could not identify NUMA node of platform GPU ID 0, defaulting to 0. Your kernel may not have been built with NUMA support.
2025-09-19 20:19:48.139981: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:271] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 0 MB memory) -> physical PluggableDevice (device: 0, name: METAL, pci bus id: <undefined>)
Traceback (most recent call last):
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 173, in <module>
    main()
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 167, in main
    results = pipeline.full_pipeline_training('data/labeled_20180713-home2mimos.csv')
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 145, in full_pipeline_training
    stage1_history = self.train_stage1_model(features, event_labels)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/train_model.py", line 81, in train_stage1_model
    self.stage1_model.build_stage1_model()
  File "/Users/tanush/Documents/repos/FYP-vishnu/lstm_models.py", line 58, in build_stage1_model
    optimizer=legacy.Adam(learning_rate=0.001),
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/keras/src/optimizers/__init__.py", line 116, in __init__
    raise ImportError(
ImportError: `keras.optimizers.legacy` is not supported in Keras 3. When using `tf.keras`, to continue using a `tf.keras.optimizers.legacy` optimizer, you can install the `tf_keras` package (Keras 2) and set the environment variable `TF_USE_LEGACY_KERAS=True` to configure TensorFlow to use `tf_keras` when accessing `tf.keras`.
Retrying after fixing Keras optimizer...
INFO:__main__:Starting full pipeline training...
INFO:__main__:Loading data from data/labeled_20180713-home2mimos.csv
INFO:data_preprocessing:Starting complete preprocessing pipeline...
INFO:data_preprocessing:Removing faulty sensor readings...
INFO:data_preprocessing:Removed 0 faulty readings
INFO:data_preprocessing:Synchronizing timestamps...
INFO:data_preprocessing:Creating driving event timeline...
INFO:data_preprocessing:Aggregating features over 30s intervals...
INFO:data_preprocessing:Preparing features for machine learning...
INFO:data_preprocessing:Available columns in aggregated data: ['interval', 'RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean', 'Event']
INFO:data_preprocessing:Looking for features: ['RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean']
INFO:data_preprocessing:Found features: ['RPM_mean', 'RPM_std', 'RPM_max', 'RPM_min', 'Load_mean', 'Load_std', 'BaseFuel_mean', 'BaseFuel_std', 'IgnitionTiming_mean', 'LambdaSensor1_mean']
INFO:data_preprocessing:Extracting driving patterns...
INFO:__main__:Creating synthetic labels for training...
INFO:__main__:Training Stage 1 model...
INFO:lstm_models:Building Stage 1 LSTM model...
2025-09-19 20:24:11.072819: I metal_plugin/src/device/metal_device.cc:1154] Metal device set to: Apple M3
2025-09-19 20:24:11.072845: I metal_plugin/src/device/metal_device.cc:296] systemMemory: 16.00 GB
2025-09-19 20:24:11.072850: I metal_plugin/src/device/metal_device.cc:313] maxCacheSize: 5.33 GB
2025-09-19 20:24:11.072864: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:305] Could not identify NUMA node of platform GPU ID 0, defaulting to 0. Your kernel may not have been built with NUMA support.
2025-09-19 20:24:11.072876: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:271] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 0 MB memory) -> physical PluggableDevice (device: 0, name: METAL, pci bus id: <undefined>)
INFO:lstm_models:Training LSTM model...
Epoch 1/50
2025-09-19 20:24:11.679966: I tensorflow/core/grappler/optimizers/custom_graph_optimizer_registry.cc:117] Plugin optimizer for device_type GPU is enabled.
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m3s[0m 4s/step - accuracy: 0.1875 - loss: 1.1163[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 457ms/step - accuracy: 0.1956 - loss: 1.1181WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m4s[0m 882ms/step - accuracy: 0.2037 - loss: 1.1198 - val_accuracy: 0.5714 - val_loss: 1.0613
Epoch 2/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.4062 - loss: 1.0633WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 104ms/step - accuracy: 0.4444 - loss: 1.0617 - val_accuracy: 0.7143 - val_loss: 1.0071
Epoch 3/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 28ms/step - accuracy: 0.7500 - loss: 0.9979WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 0.6852 - loss: 1.0033 - val_accuracy: 0.7143 - val_loss: 0.9504
Epoch 4/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 0.6562 - loss: 0.9560WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 0.6111 - loss: 0.9506 - val_accuracy: 0.7143 - val_loss: 0.8890
Epoch 5/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 0.6250 - loss: 0.9736WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 73ms/step - accuracy: 0.7037 - loss: 0.9116 - val_accuracy: 0.7143 - val_loss: 0.8214
Epoch 6/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 0.7812 - loss: 0.8214WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 0.7222 - loss: 0.8496 - val_accuracy: 0.7857 - val_loss: 0.7482
Epoch 7/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 0.7500 - loss: 0.8040WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 75ms/step - accuracy: 0.7778 - loss: 0.7622 - val_accuracy: 1.0000 - val_loss: 0.6689
Epoch 8/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 0.9062 - loss: 0.7341WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 75ms/step - accuracy: 0.9074 - loss: 0.6943 - val_accuracy: 1.0000 - val_loss: 0.5855
Epoch 9/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 24ms/step - accuracy: 0.8750 - loss: 0.6474WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 0.8889 - loss: 0.6314 - val_accuracy: 1.0000 - val_loss: 0.4989
Epoch 10/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 0.8750 - loss: 0.5104WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 75ms/step - accuracy: 0.9074 - loss: 0.5161 - val_accuracy: 1.0000 - val_loss: 0.4104
Epoch 11/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 0.9375 - loss: 0.4519WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 74ms/step - accuracy: 0.9630 - loss: 0.4404 - val_accuracy: 1.0000 - val_loss: 0.3230
Epoch 12/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 0.8750 - loss: 0.4102WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 74ms/step - accuracy: 0.8704 - loss: 0.4226 - val_accuracy: 1.0000 - val_loss: 0.2416
Epoch 13/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 1.0000 - loss: 0.2920WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 76ms/step - accuracy: 1.0000 - loss: 0.2764 - val_accuracy: 1.0000 - val_loss: 0.1686
Epoch 14/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.2400WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.2305 - val_accuracy: 1.0000 - val_loss: 0.1116
Epoch 15/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.1779WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 0.9815 - loss: 0.1860 - val_accuracy: 1.0000 - val_loss: 0.0710
Epoch 16/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 1.0000 - loss: 0.1422WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.1311 - val_accuracy: 1.0000 - val_loss: 0.0446
Epoch 17/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0717WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 74ms/step - accuracy: 1.0000 - loss: 0.0995 - val_accuracy: 1.0000 - val_loss: 0.0278
Epoch 18/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 24ms/step - accuracy: 1.0000 - loss: 0.0411WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 70ms/step - accuracy: 1.0000 - loss: 0.0510 - val_accuracy: 1.0000 - val_loss: 0.0176
Epoch 19/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0705WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 70ms/step - accuracy: 1.0000 - loss: 0.0708 - val_accuracy: 1.0000 - val_loss: 0.0114
Epoch 20/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0536WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0446 - val_accuracy: 1.0000 - val_loss: 0.0075
Epoch 21/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0160WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 70ms/step - accuracy: 1.0000 - loss: 0.0230 - val_accuracy: 1.0000 - val_loss: 0.0052
Epoch 22/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0207WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0188 - val_accuracy: 1.0000 - val_loss: 0.0037
Epoch 23/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0336WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0219 - val_accuracy: 1.0000 - val_loss: 0.0028
Epoch 24/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0152WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 70ms/step - accuracy: 1.0000 - loss: 0.0258 - val_accuracy: 1.0000 - val_loss: 0.0021
Epoch 25/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0132WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 70ms/step - accuracy: 1.0000 - loss: 0.0107 - val_accuracy: 1.0000 - val_loss: 0.0016
Epoch 26/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0277WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0278 - val_accuracy: 1.0000 - val_loss: 0.0012
Epoch 27/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0227WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0190 - val_accuracy: 1.0000 - val_loss: 9.7031e-04
Epoch 28/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0104WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0121 - val_accuracy: 1.0000 - val_loss: 7.7377e-04
Epoch 29/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0103WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0072 - val_accuracy: 1.0000 - val_loss: 6.3084e-04
Epoch 30/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0069WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0061 - val_accuracy: 1.0000 - val_loss: 5.2577e-04
Epoch 31/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 24ms/step - accuracy: 1.0000 - loss: 0.0110WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 73ms/step - accuracy: 1.0000 - loss: 0.0070 - val_accuracy: 1.0000 - val_loss: 4.4460e-04
Epoch 32/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0146WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0131 - val_accuracy: 1.0000 - val_loss: 3.8188e-04
Epoch 33/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0148WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 73ms/step - accuracy: 1.0000 - loss: 0.0092 - val_accuracy: 1.0000 - val_loss: 3.3366e-04
Epoch 34/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0095WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0072 - val_accuracy: 1.0000 - val_loss: 2.9557e-04
Epoch 35/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 1.0000 - loss: 0.0029WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0058 - val_accuracy: 1.0000 - val_loss: 2.6470e-04
Epoch 36/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0023WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 70ms/step - accuracy: 1.0000 - loss: 0.0024 - val_accuracy: 1.0000 - val_loss: 2.3915e-04
Epoch 37/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0044WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0053 - val_accuracy: 1.0000 - val_loss: 2.1803e-04
Epoch 38/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0135WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0089 - val_accuracy: 1.0000 - val_loss: 1.9892e-04
Epoch 39/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0046WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 70ms/step - accuracy: 1.0000 - loss: 0.0032 - val_accuracy: 1.0000 - val_loss: 1.8331e-04
Epoch 40/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0026WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 73ms/step - accuracy: 1.0000 - loss: 0.0053 - val_accuracy: 1.0000 - val_loss: 1.6988e-04
Epoch 41/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0047WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0049 - val_accuracy: 1.0000 - val_loss: 1.5785e-04
Epoch 42/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 1.0000 - loss: 0.0028WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0035 - val_accuracy: 1.0000 - val_loss: 1.4723e-04
Epoch 43/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 9.2288e-04WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0013 - val_accuracy: 1.0000 - val_loss: 1.3820e-04
Epoch 44/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 27ms/step - accuracy: 1.0000 - loss: 0.0012WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0055 - val_accuracy: 1.0000 - val_loss: 1.3007e-04
Epoch 45/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 0.0024WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 73ms/step - accuracy: 1.0000 - loss: 0.0042 - val_accuracy: 1.0000 - val_loss: 1.2244e-04
Epoch 46/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 1.0000 - loss: 0.0020WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 72ms/step - accuracy: 1.0000 - loss: 0.0015 - val_accuracy: 1.0000 - val_loss: 1.1546e-04
Epoch 47/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 7.5418e-04WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 69ms/step - accuracy: 1.0000 - loss: 0.0016 - val_accuracy: 1.0000 - val_loss: 1.0959e-04
Epoch 48/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 1.0000 - loss: 0.0034WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 123ms/step - accuracy: 1.0000 - loss: 0.0087 - val_accuracy: 1.0000 - val_loss: 1.0424e-04
Epoch 49/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 26ms/step - accuracy: 1.0000 - loss: 9.6278e-04WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 71ms/step - accuracy: 1.0000 - loss: 0.0014 - val_accuracy: 1.0000 - val_loss: 9.9552e-05
Epoch 50/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 25ms/step - accuracy: 1.0000 - loss: 0.0023WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 74ms/step - accuracy: 1.0000 - loss: 0.0015 - val_accuracy: 1.0000 - val_loss: 9.5320e-05
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
INFO:lstm_models:Model saved to stage1_model.h5
INFO:__main__:Training Stage 2 model...
INFO:lstm_models:Building Stage 2 LSTM model...
INFO:lstm_models:Training LSTM model...
Epoch 1/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m2s[0m 2s/step - accuracy: 0.3438 - loss: 1.0854[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 301ms/step - accuracy: 0.4034 - loss: 1.0768WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m3s[0m 791ms/step - accuracy: 0.4630 - loss: 1.0682 - val_accuracy: 0.7857 - val_loss: 1.0281
Epoch 2/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 37ms/step - accuracy: 0.5625 - loss: 1.0434WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 92ms/step - accuracy: 0.6481 - loss: 1.0202 - val_accuracy: 0.7143 - val_loss: 0.9695
Epoch 3/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 34ms/step - accuracy: 0.8125 - loss: 0.9620WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 90ms/step - accuracy: 0.7778 - loss: 0.9745 - val_accuracy: 0.8571 - val_loss: 0.9036
Epoch 4/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 33ms/step - accuracy: 0.8125 - loss: 0.9155WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 89ms/step - accuracy: 0.8148 - loss: 0.8849 - val_accuracy: 0.9286 - val_loss: 0.8271
Epoch 5/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 33ms/step - accuracy: 0.8438 - loss: 0.8899WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 89ms/step - accuracy: 0.8333 - loss: 0.8758 - val_accuracy: 0.9286 - val_loss: 0.7393
Epoch 6/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 33ms/step - accuracy: 0.9375 - loss: 0.7446WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 87ms/step - accuracy: 0.8519 - loss: 0.7849 - val_accuracy: 0.9286 - val_loss: 0.6409
Epoch 7/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9062 - loss: 0.6939WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 86ms/step - accuracy: 0.9074 - loss: 0.6852 - val_accuracy: 0.9286 - val_loss: 0.5402
Epoch 8/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.8125 - loss: 0.7390WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 91ms/step - accuracy: 0.8704 - loss: 0.6500 - val_accuracy: 0.9286 - val_loss: 0.4488
Epoch 9/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.7265WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 89ms/step - accuracy: 0.9074 - loss: 0.6283 - val_accuracy: 0.9286 - val_loss: 0.3792
Epoch 10/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9062 - loss: 0.5328WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 89ms/step - accuracy: 0.9074 - loss: 0.4983 - val_accuracy: 0.9286 - val_loss: 0.3459
Epoch 11/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.5900[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.8889 - loss: 0.5681 - val_accuracy: 0.9286 - val_loss: 0.3481
Epoch 12/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.3881[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.9074 - loss: 0.4630 - val_accuracy: 0.9286 - val_loss: 0.3641
Epoch 13/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.6452[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 61ms/step - accuracy: 0.8889 - loss: 0.5916 - val_accuracy: 0.9286 - val_loss: 0.3793
Epoch 14/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.2874[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 60ms/step - accuracy: 0.9074 - loss: 0.4940 - val_accuracy: 0.9286 - val_loss: 0.3842
Epoch 15/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.9375 - loss: 0.3273[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 61ms/step - accuracy: 0.9074 - loss: 0.3314 - val_accuracy: 0.9286 - val_loss: 0.3845
Epoch 16/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.2888[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 60ms/step - accuracy: 0.9074 - loss: 0.3906 - val_accuracy: 0.9286 - val_loss: 0.3779
Epoch 17/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9062 - loss: 0.3753[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.8889 - loss: 0.4215 - val_accuracy: 0.9286 - val_loss: 0.3664
Epoch 18/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.6809[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.9074 - loss: 0.5279 - val_accuracy: 0.9286 - val_loss: 0.3580
Epoch 19/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.9062 - loss: 0.4733[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.9074 - loss: 0.3916 - val_accuracy: 0.9286 - val_loss: 0.3472
Epoch 20/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.9375 - loss: 0.2928WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 87ms/step - accuracy: 0.9074 - loss: 0.4428 - val_accuracy: 0.9286 - val_loss: 0.3405
Epoch 21/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9062 - loss: 0.4105WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 87ms/step - accuracy: 0.9074 - loss: 0.3745 - val_accuracy: 0.9286 - val_loss: 0.3324
Epoch 22/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.9375 - loss: 0.2946WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 89ms/step - accuracy: 0.9074 - loss: 0.3660 - val_accuracy: 0.9286 - val_loss: 0.3251
Epoch 23/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.2519WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 90ms/step - accuracy: 0.9074 - loss: 0.3704 - val_accuracy: 0.9286 - val_loss: 0.3198
Epoch 24/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9062 - loss: 0.4468WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 87ms/step - accuracy: 0.9074 - loss: 0.4704 - val_accuracy: 0.9286 - val_loss: 0.3115
Epoch 25/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.8750 - loss: 0.5218WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 90ms/step - accuracy: 0.9074 - loss: 0.4627 - val_accuracy: 0.9286 - val_loss: 0.3084
Epoch 26/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.8750 - loss: 0.4573[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 61ms/step - accuracy: 0.8889 - loss: 0.4036 - val_accuracy: 0.9286 - val_loss: 0.3127
Epoch 27/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.9062 - loss: 0.2814[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 62ms/step - accuracy: 0.9074 - loss: 0.3005 - val_accuracy: 0.9286 - val_loss: 0.3176
Epoch 28/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.9375 - loss: 0.3396[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 58ms/step - accuracy: 0.8889 - loss: 0.3743 - val_accuracy: 0.9286 - val_loss: 0.3207
Epoch 29/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.3700[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.9074 - loss: 0.3833 - val_accuracy: 0.9286 - val_loss: 0.3189
Epoch 30/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.8438 - loss: 0.4380[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 58ms/step - accuracy: 0.8889 - loss: 0.3949 - val_accuracy: 0.9286 - val_loss: 0.3189
Epoch 31/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 29ms/step - accuracy: 0.8750 - loss: 0.4381[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 96ms/step - accuracy: 0.9074 - loss: 0.3507 - val_accuracy: 0.9286 - val_loss: 0.3159
Epoch 32/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 40ms/step - accuracy: 0.8438 - loss: 0.5887[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 61ms/step - accuracy: 0.9074 - loss: 0.4037 - val_accuracy: 0.9286 - val_loss: 0.3121
Epoch 33/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.2844WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 87ms/step - accuracy: 0.8889 - loss: 0.3978 - val_accuracy: 0.9286 - val_loss: 0.3068
Epoch 34/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.9062 - loss: 0.2871WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 89ms/step - accuracy: 0.9074 - loss: 0.3192 - val_accuracy: 0.9286 - val_loss: 0.2967
Epoch 35/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 33ms/step - accuracy: 0.9062 - loss: 0.3040WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 90ms/step - accuracy: 0.8889 - loss: 0.3397 - val_accuracy: 0.9286 - val_loss: 0.2910
Epoch 36/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.8438 - loss: 0.4908[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 61ms/step - accuracy: 0.9074 - loss: 0.3487 - val_accuracy: 0.9286 - val_loss: 0.2921
Epoch 37/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.3583[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 60ms/step - accuracy: 0.9074 - loss: 0.2916 - val_accuracy: 0.9286 - val_loss: 0.3003
Epoch 38/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.4184[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 60ms/step - accuracy: 0.8889 - loss: 0.4055 - val_accuracy: 0.9286 - val_loss: 0.3148
Epoch 39/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.8750 - loss: 0.3459[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.8889 - loss: 0.3262 - val_accuracy: 0.9286 - val_loss: 0.3362
Epoch 40/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.8750 - loss: 0.4073[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.9074 - loss: 0.3644 - val_accuracy: 0.9286 - val_loss: 0.3578
Epoch 41/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.8750 - loss: 0.3257[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 58ms/step - accuracy: 0.9074 - loss: 0.2619 - val_accuracy: 0.9286 - val_loss: 0.3656
Epoch 42/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.2873[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 60ms/step - accuracy: 0.8704 - loss: 0.3431 - val_accuracy: 0.9286 - val_loss: 0.3747
Epoch 43/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.9688 - loss: 0.2960[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 59ms/step - accuracy: 0.9259 - loss: 0.3000 - val_accuracy: 0.9286 - val_loss: 0.3452
Epoch 44/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8125 - loss: 0.4133[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 58ms/step - accuracy: 0.8704 - loss: 0.3051 - val_accuracy: 0.9286 - val_loss: 0.3159
Epoch 45/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.3167WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 87ms/step - accuracy: 0.9259 - loss: 0.2656 - val_accuracy: 0.9286 - val_loss: 0.2902
Epoch 46/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.8750 - loss: 0.2914WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 90ms/step - accuracy: 0.9074 - loss: 0.2811 - val_accuracy: 0.9286 - val_loss: 0.2770
Epoch 47/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 30ms/step - accuracy: 0.8750 - loss: 0.3447WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 88ms/step - accuracy: 0.9074 - loss: 0.3046 - val_accuracy: 0.9286 - val_loss: 0.2597
Epoch 48/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9688 - loss: 0.1211WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 88ms/step - accuracy: 0.9074 - loss: 0.2299 - val_accuracy: 0.9286 - val_loss: 0.2549
Epoch 49/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 32ms/step - accuracy: 0.9375 - loss: 0.1954[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 62ms/step - accuracy: 0.9074 - loss: 0.2941 - val_accuracy: 0.9286 - val_loss: 0.2714
Epoch 50/50
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 31ms/step - accuracy: 0.9375 - loss: 0.2007[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 58ms/step - accuracy: 0.9074 - loss: 0.2367 - val_accuracy: 0.9286 - val_loss: 0.2841
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
INFO:lstm_models:Model saved to stage2_model.h5
INFO:__main__:Training completed successfully!
Training completed!
Detected driving patterns: {'avg_acceleration_intensity': 300.40926521483567, 'max_acceleration': 4453.896593623034, 'acceleration_frequency': 0.0, 'braking_frequency': 0.0, 'avg_fuel_consumption': 424.10953627381156, 'fuel_variation': 83.06130912236107, 'driving_style': 'Balanced'}

Model training completed successfully!
Generated models:
-rw-r--r--@ 1 tanush  staff  1679944 Sep 19 20:24 best_model.h5
-rw-r--r--@ 1 tanush  staff     1484 Sep 19 20:24 preprocessor.pkl
-rw-r--r--@ 1 tanush  staff   430784 Sep 19 20:24 stage1_model.h5
-rw-r--r--@ 1 tanush  staff  1679944 Sep 19 20:24 stage2_model.h5

=== STEP 3: LAUNCHING DASHBOARD ===
Starting Streamlit dashboard at: Fri Sep 19 20:24:40 IST 2025
Launching Streamlit dashboard...

  You can now view your Streamlit app in your browser.

  Local URL: http://localhost:8501
  Network URL: http://10.254.217.211:8501
  External URL: http://125.16.229.131:8501

  For better performance, install the Watchdog module:

  $ xcode-select --install
  $ pip install watchdog
            
Dashboard successfully launched and accessible!
Dashboard is running at: http://localhost:8501

=== DEPLOYMENT COMPLETED SUCCESSFULLY ===
Deployment completed at: Fri Sep 19 20:25:03 IST 2025

Summary:
✅ Dependencies installed successfully
✅ Machine learning models trained successfully
✅ Streamlit dashboard launched successfully
✅ Application accessible at http://localhost:8501

Generated Files:
- stage1_model.h5 (Event classification model)
- stage2_model.h5 (Driving style classification model)
- preprocessor.pkl (Data preprocessing pipeline)
- best_model.h5 (Best model checkpoint)
INFO:inference_engine:Loading trained models...
2025-09-19 20:25:32.076817: I metal_plugin/src/device/metal_device.cc:1154] Metal device set to: Apple M3
2025-09-19 20:25:32.076864: I metal_plugin/src/device/metal_device.cc:296] systemMemory: 16.00 GB
2025-09-19 20:25:32.076876: I metal_plugin/src/device/metal_device.cc:313] maxCacheSize: 5.33 GB
2025-09-19 20:25:32.076905: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:305] Could not identify NUMA node of platform GPU ID 0, defaulting to 0. Your kernel may not have been built with NUMA support.
2025-09-19 20:25:32.076925: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:271] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 0 MB memory) -> physical PluggableDevice (device: 0, name: METAL, pci bus id: <undefined>)
WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.
WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.
INFO:inference_engine:Models loaded successfully!
INFO:inference_engine:Processing real-time ECU data...
INFO:data_preprocessing:Removing faulty sensor readings...
INFO:data_preprocessing:Removed 0 faulty readings
INFO:data_preprocessing:Synchronizing timestamps...
WARNING:data_preprocessing:Could not parse timestamps, using row index
/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/utils/validation.py:2749: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names
  warnings.warn(
ERROR:inference_engine:Error in preprocessing: X has 7 features, but StandardScaler is expecting 10 features as input.
INFO:inference_engine:Processing real-time ECU data...
INFO:data_preprocessing:Removing faulty sensor readings...
INFO:data_preprocessing:Removed 0 faulty readings
INFO:data_preprocessing:Synchronizing timestamps...
WARNING:data_preprocessing:Could not parse timestamps, using row index
/Users/tanush/Documents/repos/FYP-vishnu/env/lib/python3.12/site-packages/sklearn/utils/validation.py:2749: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names
  warnings.warn(
ERROR:inference_engine:Error in preprocessing: X has 7 features, but StandardScaler is expecting 10 features as input.
